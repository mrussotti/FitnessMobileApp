
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import ast.*;
import interpreter.Interpreter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\011\000\002\005\004" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\002\000\002" +
    "\010\005\000\002\010\003\000\002\011\004\000\002\011" +
    "\002\000\002\012\005\000\002\012\006\000\002\012\006" +
    "\000\002\012\007\000\002\012\011\000\002\012\007\000" +
    "\002\012\005\000\002\012\007\000\002\012\005\000\002" +
    "\012\005\000\002\013\003\000\002\013\002\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\006\000" +
    "\002\015\006\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\014\002\ufffe\026\005\027\013\030\011\045" +
    "\007\001\002\000\004\007\022\001\002\000\006\010\ufffa" +
    "\025\ufffa\001\002\000\004\002\000\001\002\000\010\026" +
    "\005\027\013\030\011\001\002\000\004\002\017\001\002" +
    "\000\006\010\ufff8\025\ufff8\001\002\000\004\025\016\001" +
    "\002\000\006\010\ufff9\025\ufff9\001\002\000\014\002\ufffe" +
    "\026\005\027\013\030\011\045\007\001\002\000\004\002" +
    "\uffff\001\002\000\012\007\ufffc\010\ufffc\014\ufffc\023\ufffc" +
    "\001\002\000\004\002\001\001\002\000\004\025\021\001" +
    "\002\000\012\007\ufffb\010\ufffb\014\ufffb\023\ufffb\001\002" +
    "\000\014\010\ufff6\026\005\027\013\030\011\045\007\001" +
    "\002\000\004\010\ufff7\001\002\000\004\010\030\001\002" +
    "\000\006\010\ufff4\014\026\001\002\000\012\026\005\027" +
    "\013\030\011\045\007\001\002\000\004\010\ufff5\001\002" +
    "\000\004\011\031\001\002\000\032\011\041\012\ufff2\013" +
    "\042\021\043\025\034\026\005\027\013\030\011\042\040" +
    "\044\033\045\007\047\037\001\002\000\004\023\165\001" +
    "\002\000\004\007\161\001\002\000\006\007\153\023\152" +
    "\001\002\000\032\011\041\012\ufff2\013\042\021\043\025" +
    "\034\026\005\027\013\030\011\042\040\044\033\045\007" +
    "\047\037\001\002\000\004\012\150\001\002\000\016\006" +
    "\046\007\051\015\047\024\044\025\050\046\053\001\002" +
    "\000\004\007\111\001\002\000\032\011\041\012\ufff2\013" +
    "\042\021\043\025\034\026\005\027\013\030\011\042\040" +
    "\044\033\045\007\047\037\001\002\000\016\006\046\007" +
    "\051\015\047\024\044\025\050\046\053\001\002\000\016" +
    "\006\046\007\051\015\047\024\044\025\050\046\053\001" +
    "\002\000\042\004\uffe2\005\uffe2\006\uffe2\010\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\022\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\042" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\022\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\001\002\000\016\006\046\007" +
    "\051\015\047\024\044\025\050\046\053\001\002\000\016" +
    "\006\046\007\051\015\047\024\044\025\050\046\053\001" +
    "\002\000\044\004\uffe1\005\uffe1\006\uffe1\007\072\010\uffe1" +
    "\014\uffe1\016\uffe1\017\uffe1\022\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\024\006\046\007\051\015\047\024\044\025\050\026" +
    "\005\027\013\030\011\046\053\001\002\000\014\004\060" +
    "\005\055\006\056\017\057\022\054\001\002\000\042\004" +
    "\uffe3\005\uffe3\006\uffe3\010\uffe3\014\uffe3\016\uffe3\017\uffe3" +
    "\022\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\001\002\000\034\011\ufff1\012\ufff1" +
    "\013\ufff1\021\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\001\002\000\016" +
    "\006\046\007\051\015\047\024\044\025\050\046\053\001" +
    "\002\000\016\006\046\007\051\015\047\024\044\025\050" +
    "\046\053\001\002\000\016\006\046\007\051\015\047\024" +
    "\044\025\050\046\053\001\002\000\016\006\046\007\051" +
    "\015\047\024\044\025\050\046\053\001\002\000\042\004" +
    "\uffd7\005\055\006\056\010\uffd7\014\uffd7\016\uffd7\017\057" +
    "\022\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\001\002\000\042\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\014\uffd8\016\uffd8\017\uffd8\022\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\001\002\000\042\004\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\014\uffd9\016\uffd9\017\057\022\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001" +
    "\002\000\042\004\uffda\005\uffda\006\uffda\010\uffda\014\uffda" +
    "\016\uffda\017\057\022\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\001\002\000\004" +
    "\010\070\001\002\000\014\004\060\005\055\006\056\010" +
    "\067\017\057\001\002\000\042\004\uffdb\005\uffdb\006\uffdb" +
    "\010\uffdb\014\uffdb\016\uffdb\017\uffdb\022\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\001\002\000\016\006\046\007\051\015\047\024\044\025" +
    "\050\046\053\001\002\000\042\004\uffdf\005\uffdf\006\uffdf" +
    "\010\uffdf\014\uffdf\016\uffdf\017\uffdf\022\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\001\002\000\020\006\046\007\051\010\uffe6\015\047\024" +
    "\044\025\050\046\053\001\002\000\004\010\uffe7\001\002" +
    "\000\004\010\100\001\002\000\016\004\060\005\055\006" +
    "\056\010\uffe4\014\076\017\057\001\002\000\016\006\046" +
    "\007\051\015\047\024\044\025\050\046\053\001\002\000" +
    "\004\010\uffe5\001\002\000\042\004\uffde\005\uffde\006\uffde" +
    "\010\uffde\014\uffde\016\uffde\017\uffde\022\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\001\002\000\014\004\uffdd\005\uffdd\006\uffdd\016\103\017" +
    "\uffdd\001\002\000\012\004\060\005\055\006\056\017\057" +
    "\001\002\000\042\004\uffdc\005\uffdc\006\uffdc\010\uffdc\014" +
    "\uffdc\016\uffdc\017\uffdc\022\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\042\004\uffe0\005\uffe0\006\uffe0\010\uffe0\014\uffe0\016\uffe0" +
    "\017\uffe0\022\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\014\004\060" +
    "\005\055\006\056\017\057\022\106\001\002\000\034\011" +
    "\uffe9\012\uffe9\013\uffe9\021\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9\001" +
    "\002\000\004\012\110\001\002\000\034\011\uffe8\012\uffe8" +
    "\013\uffe8\021\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\001\002\000\020" +
    "\006\046\007\115\015\047\024\044\025\050\041\113\046" +
    "\053\001\002\000\010\010\142\037\135\040\136\001\002" +
    "\000\020\006\046\007\115\015\047\024\044\025\050\041" +
    "\113\046\053\001\002\000\026\004\060\005\055\006\056" +
    "\017\057\031\121\032\120\033\123\034\122\035\125\036" +
    "\124\001\002\000\026\006\046\007\115\015\047\024\044" +
    "\025\050\026\005\027\013\030\011\041\113\046\053\001" +
    "\002\000\010\010\134\037\135\040\136\001\002\000\030" +
    "\004\060\005\055\006\056\010\067\017\057\031\121\032" +
    "\120\033\123\034\122\035\125\036\124\001\002\000\016" +
    "\006\046\007\051\015\047\024\044\025\050\046\053\001" +
    "\002\000\016\006\046\007\051\015\047\024\044\025\050" +
    "\046\053\001\002\000\016\006\046\007\051\015\047\024" +
    "\044\025\050\046\053\001\002\000\016\006\046\007\051" +
    "\015\047\024\044\025\050\046\053\001\002\000\016\006" +
    "\046\007\051\015\047\024\044\025\050\046\053\001\002" +
    "\000\016\006\046\007\051\015\047\024\044\025\050\046" +
    "\053\001\002\000\020\004\060\005\055\006\056\010\uffd2" +
    "\017\057\037\uffd2\040\uffd2\001\002\000\020\004\060\005" +
    "\055\006\056\010\uffd1\017\057\037\uffd1\040\uffd1\001\002" +
    "\000\020\004\060\005\055\006\056\010\uffd4\017\057\037" +
    "\uffd4\040\uffd4\001\002\000\020\004\060\005\055\006\056" +
    "\010\uffd3\017\057\037\uffd3\040\uffd3\001\002\000\020\004" +
    "\060\005\055\006\056\010\uffd6\017\057\037\uffd6\040\uffd6" +
    "\001\002\000\020\004\060\005\055\006\056\010\uffd5\017" +
    "\057\037\uffd5\040\uffd5\001\002\000\010\010\uffcd\037\uffcd" +
    "\040\uffcd\001\002\000\020\006\046\007\115\015\047\024" +
    "\044\025\050\041\113\046\053\001\002\000\020\006\046" +
    "\007\115\015\047\024\044\025\050\041\113\046\053\001" +
    "\002\000\010\010\uffcf\037\135\040\uffcf\001\002\000\010" +
    "\010\uffd0\037\uffd0\040\uffd0\001\002\000\010\010\uffce\037" +
    "\uffce\040\uffce\001\002\000\030\011\041\013\042\021\043" +
    "\025\034\026\005\027\013\030\011\042\040\044\033\045" +
    "\007\047\037\001\002\000\034\011\uffee\012\uffee\013\uffee" +
    "\021\uffee\025\uffee\026\uffee\027\uffee\030\uffee\042\uffee\043" +
    "\144\044\uffee\045\uffee\047\uffee\001\002\000\030\011\041" +
    "\013\042\021\043\025\034\026\005\027\013\030\011\042" +
    "\040\044\033\045\007\047\037\001\002\000\034\011\uffed" +
    "\012\uffed\013\uffed\021\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\047\uffed\001\002" +
    "\000\014\004\060\005\055\006\056\017\057\022\147\001" +
    "\002\000\034\011\uffeb\012\uffeb\013\uffeb\021\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\047\uffeb\001\002\000\014\002\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\045\ufffd\001\002\000\004\012\ufff3\001\002\000" +
    "\016\006\046\007\051\015\047\024\044\025\050\046\053" +
    "\001\002\000\020\006\046\007\051\010\uffe6\015\047\024" +
    "\044\025\050\046\053\001\002\000\004\010\155\001\002" +
    "\000\004\022\156\001\002\000\034\011\uffea\012\uffea\013" +
    "\uffea\021\uffea\025\uffea\026\uffea\027\uffea\030\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\047\uffea\001\002\000\014\004" +
    "\060\005\055\006\056\017\057\022\160\001\002\000\034" +
    "\011\uffef\012\uffef\013\uffef\021\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef" +
    "\001\002\000\020\006\046\007\115\015\047\024\044\025" +
    "\050\041\113\046\053\001\002\000\010\010\163\037\135" +
    "\040\136\001\002\000\030\011\041\013\042\021\043\025" +
    "\034\026\005\027\013\030\011\042\040\044\033\045\007" +
    "\047\037\001\002\000\034\011\uffec\012\uffec\013\uffec\021" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\047\uffec\001\002\000\016\006\046\007" +
    "\051\015\047\024\044\025\050\046\053\001\002\000\014" +
    "\004\060\005\055\006\056\017\057\022\167\001\002\000" +
    "\034\011\ufff0\012\ufff0\013\ufff0\021\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\047" +
    "\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\014\002\007\003\005\004\013\005\003\006" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\004\013\005\003\006\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\024\006\011\007\023\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\024\006\011\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\031\006\011" +
    "\011\035\012\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\031\006\011\011\150" +
    "\012\034\001\001\000\002\001\001\000\006\015\145\016" +
    "\044\001\001\000\002\001\001\000\012\005\031\006\011" +
    "\011\106\012\034\001\001\000\006\015\104\016\044\001" +
    "\001\000\006\015\051\016\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\103\016\044\001\001\000" +
    "\006\015\101\016\100\001\001\000\002\001\001\000\010" +
    "\006\064\015\065\016\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\063\016\044" +
    "\001\001\000\006\015\062\016\044\001\001\000\006\015" +
    "\061\016\044\001\001\000\006\015\060\016\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\070\016\044\001\001\000\002\001" +
    "\001\000\012\013\073\014\072\015\074\016\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\076\015\074\016\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\113\016\044\017\111\001\001\000\002\001\001\000\010" +
    "\015\113\016\044\017\140\001\001\000\002\001\001\000" +
    "\012\006\064\015\116\016\044\017\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\132\016\044\001" +
    "\001\000\006\015\131\016\044\001\001\000\006\015\130" +
    "\016\044\001\001\000\006\015\127\016\044\001\001\000" +
    "\006\015\126\016\044\001\001\000\006\015\125\016\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\113\016\044\017\137\001" +
    "\001\000\010\015\113\016\044\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\031\006\011\012\142\001\001\000\002\001\001\000\010" +
    "\005\031\006\011\012\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\156\016\044\001\001\000\012\013" +
    "\153\014\072\015\074\016\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\113\016\044\017\161\001\001" +
    "\000\002\001\001\000\010\005\031\006\011\012\163\001" +
    "\001\000\002\001\001\000\006\015\165\016\044\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= funcDefList 
            {
              Program RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDefList f = (FuncDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(f, loc(fleft, fright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funcDefList ::= funcDef funcDefList 
            {
              FuncDefList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDefList l = (FuncDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDefList(f, l, loc(fleft, fright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcDefList ::= 
            {
              FuncDefList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcDef ::= varDecl LPAREN formalDeclList RPAREN LCURL stmtList RCURL 
            {
              FuncDef RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FormalDeclList f = (FormalDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncDef(v, f, s, loc(vleft, vright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDecl ::= type IDENT 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(t, i, loc(tleft, tright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDecl ::= MUTABLE type IDENT 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(t, i, true, loc(tleft, tright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(Type.INT, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REF 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(Type.REF, loc(rleft, rright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= _Q 
            {
              Type RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(Type.Q, loc(qleft, qright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalDeclList ::= neFormalDeclList 
            {
              FormalDeclList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NeFormalDeclList n = (NeFormalDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FormalDeclList(n, loc(nleft, nright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalDeclList ::= 
            {
              FormalDeclList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // neFormalDeclList ::= varDecl COMMA neFormalDeclList 
            {
              NeFormalDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NeFormalDeclList n = (NeFormalDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NeFormalDeclList(v, n, loc(vleft, vright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // neFormalDeclList ::= varDecl 
            {
              NeFormalDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NeFormalDeclList(v, loc(vleft, vright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmtList ::= stmt stmtList 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList l = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, l, loc(sleft, sright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtList ::= 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.RETURN, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= varDecl EQUALS expr SEMICOLON 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.EQUALS, v, e, loc(vleft, vright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= IDENT EQUALS expr SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.ASSIGN, i, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= IF LPAREN cond RPAREN stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt(Stmt.IF, c, s, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= IF LPAREN cond RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt(Stmt.ELSE, c, s1, s2, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= WHILE LPAREN cond RPAREN stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt(Stmt.WHILE, c, s, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= FREE expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.FREE, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= IDENT LPAREN exprList RPAREN SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Stmt(Stmt.CALL, i, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= PRINT expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.PRINT, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= LCURL stmtList RCURL 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt(Stmt.STMTBLOCK, s, loc(sleft, sright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprList ::= neExprList 
            {
              ExprList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NeExprList n = (NeExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(n, loc(nleft, nright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprList ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // neExprList ::= expr COMMA neExprList 
            {
              NeExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NeExprList n = (NeExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NeExprList(e, n, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // neExprList ::= expr 
            {
              NeExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NeExprList(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NIL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NilExpr(loc(nleft, nright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= INTCONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long c = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IDENT(i, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(new ConstExpr(0, null), BinaryExpr.MINUS, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LPAREN type RPAREN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeCast(t, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= IDENT LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallExpr(i, e, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= binaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryExpr e = (BinaryExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LBRACK binaryExpr RBRACK 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr e = (BinaryExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ConcurrentExpression(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binaryExpr ::= expr PLUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binaryExpr ::= expr MINUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binaryExpr ::= expr TIMES expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binaryExpr ::= expr DOT expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= expr LTE expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.LTE, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= expr GTE expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.GTE, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= expr EQ expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.EQ, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= expr NOTEQ expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.NOTEQ, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= expr LT expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.LT, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= expr GT expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, Cond.GT, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= cond AND cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(c1, Cond.AND, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond OR cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(c1, Cond.OR, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= NOT cond 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(Cond.NOT, c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= LPAREN cond RPAREN 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
